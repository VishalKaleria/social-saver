name: Build & Release

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write # Needed for checkout and pushing tags WITHIN the private repo if you were doing that
  # packages: write # Probably not needed unless using GitHub Packages

jobs:
  release:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # Fetches code from the private repo where the workflow runs

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Get version from package.json
        id: get_version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Extracted Version: $VERSION"
          # Set both the plain version and the tag name ('v' prefix)
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=v$VERSION" >> $GITHUB_ENV
          echo "Tag to be used: v$VERSION"


      # Step 1: Ensure the tag exists on the PUBLIC repository
      - name: Create or force push version tag to PUBLIC repo
        env:
          # Use the PAT here for pushing the tag to the public repo
          GH_PAT: ${{ secrets.GH_PAT }}
          TAG_NAME: ${{ env.TAG_NAME }} # Use the tag name set previously
          PUBLIC_REPO_URL: https://github.com/vishalkaleria/social-saver.git
        shell: bash
        run: |
          echo "Configuring Git user..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "Creating local tag ${TAG_NAME}"
          # Create/update the tag locally based on the current commit
          git tag -f "${TAG_NAME}"

          echo "Pushing tag ${TAG_NAME} to ${PUBLIC_REPO_URL}"
          # Construct the push URL with the PAT for authentication
          PUSH_URL="https://x-access-token:${GH_PAT}@github.com/vishalkaleria/social-saver.git"
          # Push the tag to the public repo, overwriting if it exists there
          git push "${PUSH_URL}" "${TAG_NAME}" --force

          echo "Tag push attempt completed for ${TAG_NAME}."
        # Keep your original continue-on-error if you need it
        continue-on-error: true

      # Step 2: Use the PAT for electron-builder to publish to the PUBLIC repo release
      - name: Build & Publish via electron-builder
        env:
          # *** THIS IS THE KEY FIX ***
          # Use your GH_PAT secret for publishing to the public repo
          GH_TOKEN: ${{ secrets.GH_PAT }}
          # Keep your original env vars if needed
          EP_GH_IGNORE_TIME: true
        run: |
          # Keep your original build/publish commands and error handling
          pnpm run build || echo "Build failed, continuing..."
          pnpm exec electron-builder --publish always || echo "Release failed, continuing..."
