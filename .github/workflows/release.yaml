name: Build & Release

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [main] # Triggers on push to main

permissions:
  contents: write # Needed for checkout and potentially tagging in the private repo
  # packages: write # Only needed if publishing to GitHub Packages registry

jobs:
  release:
    strategy:
      fail-fast: false # Allow other jobs to continue if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use latest version

      - name: Install pnpm
        uses: pnpm/action-setup@v3 # Use dedicated pnpm action
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          # Optional: Cache electron-builder binaries too
          # cache-dependency-path: |
          #  pnpm-lock.yaml
          #  ~/.cache/electron-builder

      - name: Install dependencies
        run: pnpm install --frozen-lockfile # Use --frozen-lockfile for CI consistency

      - name: Get version from package.json
        id: get_version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          # Ensure the version is prefixed with 'v' for the tag
          if [[ $VERSION != v* ]]; then
            VERSION="v$VERSION"
          fi
          echo "APP_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Detected version tag: $VERSION"

      # Optional: Tagging the *private* repo. Consider if you want tags on public instead.
      - name: Create or force push version tag (in private repo)
        env:
           # Use PAT for pushing tag as well, for consistency/if needed later
           GIT_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f "$APP_VERSION"
          # Authenticate push using the token
          git push https://x-access-token:${GIT_TOKEN}@github.com/${{ github.repository }}.git "$APP_VERSION" --force
        continue-on-error: true # Continue if tag push fails (e.g., tag exists and force fails)

      - name: Build & Publish to Public Repo via electron-builder
        env:
          # *** THIS IS THE KEY CHANGE ***
          # Use your PAT for publishing to the public repo
          GH_TOKEN: ${{ secrets.GH_PAT }}
          # The following might not be needed if using PAT, but doesn't hurt
          # EP_GH_IGNORE_TIME: true
        # Remove || echo ... unless you specifically want the workflow to succeed even if build/publish fails
        run: |
          pnpm run vite:build # Separate build step for frontend assets first
          pnpm exec electron-builder --publish always
